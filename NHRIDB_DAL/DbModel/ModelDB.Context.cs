//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     對這個檔案進行手動變更可能導致您的應用程式產生未預期的行為。
//     如果重新產生程式碼，將會覆寫對這個檔案的手動變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace NHRIDB_DAL.DbModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NHRIDBEntitiesDB : DbContext
    {
        public NHRIDBEntitiesDB()
            : base("name=NHRIDBEntitiesDB")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<GroupUser> GroupUser { get; set; }
        public virtual DbSet<MenuName> MenuName { get; set; }
        public virtual DbSet<Permissions> Permissions { get; set; }
        public virtual DbSet<Hospital> Hospital { get; set; }
        public virtual DbSet<RLinkD> RLinkD { get; set; }
        public virtual DbSet<LogLogin> LogLogin { get; set; }
        public virtual DbSet<TemplateExcelUpDataRecord> TemplateExcelUpDataRecord { get; set; }
        public virtual DbSet<Plan> Plan { get; set; }
        public virtual DbSet<TubeData> TubeData { get; set; }
        public virtual DbSet<TubeDataLog> TubeDataLog { get; set; }
        public virtual DbSet<ErrorLog> ErrorLog { get; set; }
        public virtual DbSet<UserLog> UserLog { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<SysLog> SysLog { get; set; }
    
        public virtual int SetUnLockUser(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetUnLockUser", userNameParameter);
        }
    
        public virtual ObjectResult<GetLockUser_Result> GetLockUser(Nullable<int> count)
        {
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLockUser_Result>("GetLockUser", countParameter);
        }
    
        public virtual ObjectResult<GetDifferentTotal_Result> GetDifferentTotal(Nullable<System.Guid> hospitalId)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDifferentTotal_Result>("GetDifferentTotal", hospitalIdParameter);
        }
    
        public virtual ObjectResult<GetTotal_Result> GetTotal(string hospId, string hospitalId, string regionKey, string diagnosisKey, string endYearSt, string endYearEd, string ageSt, string ageEd, string gender, Nullable<bool> blood, Nullable<bool> frozenTissue, Nullable<bool> paraffinSection, Nullable<bool> urine, Nullable<bool> pleuraleffusion, Nullable<bool> ascites, Nullable<bool> boneMarrow, Nullable<bool> cSF, Nullable<int> caseTimes)
        {
            var hospIdParameter = hospId != null ?
                new ObjectParameter("hospId", hospId) :
                new ObjectParameter("hospId", typeof(string));
    
            var hospitalIdParameter = hospitalId != null ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(string));
    
            var regionKeyParameter = regionKey != null ?
                new ObjectParameter("regionKey", regionKey) :
                new ObjectParameter("regionKey", typeof(string));
    
            var diagnosisKeyParameter = diagnosisKey != null ?
                new ObjectParameter("diagnosisKey", diagnosisKey) :
                new ObjectParameter("diagnosisKey", typeof(string));
    
            var endYearStParameter = endYearSt != null ?
                new ObjectParameter("endYearSt", endYearSt) :
                new ObjectParameter("endYearSt", typeof(string));
    
            var endYearEdParameter = endYearEd != null ?
                new ObjectParameter("endYearEd", endYearEd) :
                new ObjectParameter("endYearEd", typeof(string));
    
            var ageStParameter = ageSt != null ?
                new ObjectParameter("ageSt", ageSt) :
                new ObjectParameter("ageSt", typeof(string));
    
            var ageEdParameter = ageEd != null ?
                new ObjectParameter("ageEd", ageEd) :
                new ObjectParameter("ageEd", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var bloodParameter = blood.HasValue ?
                new ObjectParameter("blood", blood) :
                new ObjectParameter("blood", typeof(bool));
    
            var frozenTissueParameter = frozenTissue.HasValue ?
                new ObjectParameter("frozenTissue", frozenTissue) :
                new ObjectParameter("frozenTissue", typeof(bool));
    
            var paraffinSectionParameter = paraffinSection.HasValue ?
                new ObjectParameter("paraffinSection", paraffinSection) :
                new ObjectParameter("paraffinSection", typeof(bool));
    
            var urineParameter = urine.HasValue ?
                new ObjectParameter("urine", urine) :
                new ObjectParameter("urine", typeof(bool));
    
            var pleuraleffusionParameter = pleuraleffusion.HasValue ?
                new ObjectParameter("pleuraleffusion", pleuraleffusion) :
                new ObjectParameter("pleuraleffusion", typeof(bool));
    
            var ascitesParameter = ascites.HasValue ?
                new ObjectParameter("ascites", ascites) :
                new ObjectParameter("ascites", typeof(bool));
    
            var boneMarrowParameter = boneMarrow.HasValue ?
                new ObjectParameter("boneMarrow", boneMarrow) :
                new ObjectParameter("boneMarrow", typeof(bool));
    
            var cSFParameter = cSF.HasValue ?
                new ObjectParameter("CSF", cSF) :
                new ObjectParameter("CSF", typeof(bool));
    
            var caseTimesParameter = caseTimes.HasValue ?
                new ObjectParameter("caseTimes", caseTimes) :
                new ObjectParameter("caseTimes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotal_Result>("GetTotal", hospIdParameter, hospitalIdParameter, regionKeyParameter, diagnosisKeyParameter, endYearStParameter, endYearEdParameter, ageStParameter, ageEdParameter, genderParameter, bloodParameter, frozenTissueParameter, paraffinSectionParameter, urineParameter, pleuraleffusionParameter, ascitesParameter, boneMarrowParameter, cSFParameter, caseTimesParameter);
        }
    
        public virtual ObjectResult<GetTotal_Result> GetTotal_Result(string hospId, string hospitalId, string regionKey, string diagnosisKey, string endYearSt, string endYearEd, string ageSt, string ageEd, string gender, Nullable<bool> blood, Nullable<bool> frozenTissue, Nullable<bool> paraffinSection, Nullable<bool> urine, Nullable<bool> pleuraleffusion, Nullable<bool> ascites, Nullable<bool> boneMarrow, Nullable<bool> cSF, Nullable<int> caseTimes)
        {
            var hospIdParameter = hospId != null ?
                new ObjectParameter("hospId", hospId) :
                new ObjectParameter("hospId", typeof(string));
    
            var hospitalIdParameter = hospitalId != null ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(string));
    
            var regionKeyParameter = regionKey != null ?
                new ObjectParameter("regionKey", regionKey) :
                new ObjectParameter("regionKey", typeof(string));
    
            var diagnosisKeyParameter = diagnosisKey != null ?
                new ObjectParameter("diagnosisKey", diagnosisKey) :
                new ObjectParameter("diagnosisKey", typeof(string));
    
            var endYearStParameter = endYearSt != null ?
                new ObjectParameter("endYearSt", endYearSt) :
                new ObjectParameter("endYearSt", typeof(string));
    
            var endYearEdParameter = endYearEd != null ?
                new ObjectParameter("endYearEd", endYearEd) :
                new ObjectParameter("endYearEd", typeof(string));
    
            var ageStParameter = ageSt != null ?
                new ObjectParameter("ageSt", ageSt) :
                new ObjectParameter("ageSt", typeof(string));
    
            var ageEdParameter = ageEd != null ?
                new ObjectParameter("ageEd", ageEd) :
                new ObjectParameter("ageEd", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var bloodParameter = blood.HasValue ?
                new ObjectParameter("blood", blood) :
                new ObjectParameter("blood", typeof(bool));
    
            var frozenTissueParameter = frozenTissue.HasValue ?
                new ObjectParameter("frozenTissue", frozenTissue) :
                new ObjectParameter("frozenTissue", typeof(bool));
    
            var paraffinSectionParameter = paraffinSection.HasValue ?
                new ObjectParameter("paraffinSection", paraffinSection) :
                new ObjectParameter("paraffinSection", typeof(bool));
    
            var urineParameter = urine.HasValue ?
                new ObjectParameter("urine", urine) :
                new ObjectParameter("urine", typeof(bool));
    
            var pleuraleffusionParameter = pleuraleffusion.HasValue ?
                new ObjectParameter("pleuraleffusion", pleuraleffusion) :
                new ObjectParameter("pleuraleffusion", typeof(bool));
    
            var ascitesParameter = ascites.HasValue ?
                new ObjectParameter("ascites", ascites) :
                new ObjectParameter("ascites", typeof(bool));
    
            var boneMarrowParameter = boneMarrow.HasValue ?
                new ObjectParameter("boneMarrow", boneMarrow) :
                new ObjectParameter("boneMarrow", typeof(bool));
    
            var cSFParameter = cSF.HasValue ?
                new ObjectParameter("CSF", cSF) :
                new ObjectParameter("CSF", typeof(bool));
    
            var caseTimesParameter = caseTimes.HasValue ?
                new ObjectParameter("caseTimes", caseTimes) :
                new ObjectParameter("caseTimes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotal_Result>("GetTotal_Result", hospIdParameter, hospitalIdParameter, regionKeyParameter, diagnosisKeyParameter, endYearStParameter, endYearEdParameter, ageStParameter, ageEdParameter, genderParameter, bloodParameter, frozenTissueParameter, paraffinSectionParameter, urineParameter, pleuraleffusionParameter, ascitesParameter, boneMarrowParameter, cSFParameter, caseTimesParameter);
        }
    
        public virtual ObjectResult<GetDifferentTotal_Result> GetDifferentTotal_Result(Nullable<System.Guid> hospitalId)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDifferentTotal_Result>("GetDifferentTotal_Result", hospitalIdParameter);
        }
    }
}
